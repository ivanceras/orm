package com.ivanceras.db.server.util.generators;

import com.ivanceras.commons.conf.Configuration;
import static com.ivanceras.db.server.util.DAOGenerator.Array;
import com.ivanceras.commons.strings.CStringUtils;
import com.ivanceras.commons.writer.FileUtil;
import com.ivanceras.commons.writer.SourceWriter;
import com.ivanceras.commons.writer.StringSourceWriter;
import com.ivanceras.db.api.DAO_Operator;
import com.ivanceras.db.api.EntityManager;
import com.ivanceras.db.api.IDatabase;
import com.ivanceras.db.api.ModelDef;
import com.ivanceras.db.shared.DAO;
import com.ivanceras.db.shared.datatype.DataTypeGeneric;
import com.ivanceras.db.shared.datatype.DataTypeJava;
import com.ivanceras.db.shared.util.SpecialCase;

public class DAOClassGenerator {
	
	
	private boolean generateDAOClass(ModelDef modeldef, Configuration conf, boolean useCentralizeString, boolean includeDepracated){
		SourceWriter sw = new StringSourceWriter();
		String directory = conf.daodirectory;
		String packageName = conf.daopackageName;
		String modelName = modeldef.getModelName();
		boolean useCamelCase = conf.useCamelCase;
		if(useCamelCase){
			modelName = CStringUtils.camelCaseUnderscores(modelName);
		}
		String className = CStringUtils.capitalize(modelName, useCamelCase);
		String varClassName = CStringUtils.toVariableName(className, useCamelCase);
		sw.print("package "+packageName+";");
		sw.lnprint("");
		sw.lnprint("/***");
		sw.lnprint("* This is automatically generated by "+DAOClassGenerator.class.getCanonicalName()+", based on the database table schema");
		sw.lnprint("* ");
		sw.lnprint("* ");
		sw.lnprint("*/");
		sw.lnprint("");
		sw.lnprint("import "+DAO.class.getCanonicalName()+";");
		sw.lnprint("import "+conf.metaDataPackageName+".Column;");
		sw.lnprint("public class DAO_"+className+" extends DAO{");
		sw.lnprint("/**");
		sw.lnprint(" *"); 
		sw.lnprint(" */");

		String[] attributes = modeldef.getAttributes();
		String[] dataTypes = DataTypeJava.fromGenericDataType(modeldef.getDataTypes());
		if(modeldef.getSubClass() != null && modeldef.getSubClass().length > 0){
			String[] subclassAttributes = {IDatabase.SUBCLASSTABLE};
			attributes = CStringUtils.mergeString(attributes, subclassAttributes);
			String[] subclassDatatypes = {DataTypeGeneric.STRING};
			dataTypes = CStringUtils.mergeString(dataTypes, subclassDatatypes);
		}
		String[] hasOne = modeldef.getHasOne();
		String[] distinctHasOne = BeanGenerator.getDistinctString(hasOne);
		String[] hasMany = modeldef.getHasMany();


		sw.lnprint("");
		sw.lnprint("");
		sw.lnprint("\tpublic DAO_"+className+"(){");
		sw.lnprint("\t\tsuper(\""+className+"\");");
		sw.lnprint("\t}");
		sw.lnprint("");
		for(int i = 0; i < attributes.length; i++){
			//			System.out.lnprint("attribute["+i+"]: "+attributes[i]);
			String att = SpecialCase.getEquiv(attributes[i]);
			String columnName = CStringUtils.toVariableName(att);
			att = CStringUtils.capitalize(att.toLowerCase(),useCamelCase);
			String attVar = CStringUtils.toVariableName(att,useCamelCase);
			String datatype = dataTypes[i];
			sw.lnprint("\tpublic "+datatype+" get"+att+"(){");
			sw.lnprint("\t\treturn ("+datatype+")get_Value(Column."+columnName+");");
			sw.lnprint("\t}");
			sw.lnprint("");
			sw.lnprint("\tpublic void set"+att+"("+datatype+" "+attVar+"){");
			sw.lnprint("\t\tset_Value(Column."+columnName+", "+attVar+");");
			sw.lnprint("\t}");
			sw.lnprint("");
		}

		for(int i = 0; i < distinctHasOne.length; i++){
			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[i].toLowerCase(),useCamelCase);
			String distinctHasOneVar = CStringUtils.toVariableName(distinctHasOneStr,useCamelCase);
			sw.lnprint("");
			sw.lnprint("\tpublic void set"+distinctHasOneStr+"(DAO_"+distinctHasOneStr+" "+distinctHasOneVar+"){");
			sw.lnprint("\t\tset_Value(\""+distinctHasOne[i]+"\", "+distinctHasOneVar+");");
			sw.lnprint("\t}");
			sw.lnprint("");
			sw.lnprint("\tpublic DAO_"+distinctHasOneStr+" get"+distinctHasOneStr+"(){");
			sw.lnprint("\t\treturn (DAO_"+distinctHasOneStr+")get_Value(\""+distinctHasOne[i]+"\");");
			sw.lnprint("\t}");
		}


		for(int i = 0; i < hasMany.length; i++){
			String hasManyStr = CStringUtils.capitalize(hasMany[i].toLowerCase(),useCamelCase);
			String hasManyVar = CStringUtils.toVariableName(hasManyStr,useCamelCase);
			sw.lnprint("");
			sw.lnprint("\tpublic void set"+hasManyStr+Array+"(DAO_"+hasManyStr+"[] "+hasManyVar+Array+"){");
			sw.lnprint("\t\tset_Value(\""+hasMany[i]+Array+"\", "+hasManyVar+Array+");");
			sw.lnprint("\t}");
			sw.lnprint("");
			sw.lnprint("\tpublic DAO_"+hasManyStr+"[] get"+hasManyStr+Array+"(){");
			sw.lnprint("\t\treturn (DAO_"+hasManyStr+"[])get_Value(\""+hasMany[i]+Array+"\");");
			sw.lnprint("\t}");
		}
		if(includeDepracated){
			sw.lnprint("");
			sw.lnprint("\t/**");
			sw.lnprint("\t * @deprecated user{@link "+EntityManager.class.getSimpleName()+".cast(DAO_"+className+".class, dao); instead))}");
			sw.lnprint("\t * @param dao");
			sw.lnprint("\t * @return DAO_"+className+"");
			sw.lnprint("\t */");
			sw.lnprint("\t@Deprecated");
			sw.lnprint("\tpublic static DAO_"+className+" cast(DAO dao){");
			sw.lnprint("\t\tif(dao == null){");
			sw.lnprint("\t\t\treturn null;");
			sw.lnprint("\t\t}");
			sw.lnprint("\t\telse if(DAO_"+className+".class.equals(dao.getClass())){");
			sw.lnprint("\t\t\treturn (DAO_"+className+") dao;");
			sw.lnprint("\t\t}");
			sw.lnprint("\t\telse{");
			sw.lnprint("\t\t\tDAO_"+className+" "+varClassName+" = "+DAO_Operator.class.getSimpleName()+".cast(new DAO_"+className+"(), \""+className+"\", dao);");
			sw.lnprint("\t\t\treturn "+varClassName+";");
			sw.lnprint("\t\t}");
			sw.lnprint("\t}");
			sw.lnprint("\t");
			sw.lnprint("\t/**");
			sw.lnprint("\t * @deprecated user{@link "+EntityManager.class.getSimpleName()+".cast(DAO_"+className+".class, daoArray); instead))}");
			sw.lnprint("\t * @param daoArray");
			sw.lnprint("\t * @return DAO_"+className+"[]");
			sw.lnprint("\t */");
			sw.lnprint("\t@Deprecated");
			sw.lnprint("\tpublic static DAO_"+className+"[] cast(DAO[] daoArray){");
			sw.lnprint("\t\tif(daoArray == null){");
			sw.lnprint("\t\t\treturn null;");
			sw.lnprint("\t\t}");
			sw.lnprint("\t\telse if(DAO_"+className+"[].class.equals(daoArray.getClass())){");
			sw.lnprint("\t\t\treturn (DAO_"+className+"[]) daoArray;");
			sw.lnprint("\t\t}");
			sw.lnprint("\t\telse{");
			sw.lnprint("\t\t\tDAO_"+className+"[] "+varClassName+Array+" = "+DAO_Operator.class.getSimpleName()+".cast(new DAO_"+className+"[daoArray.length],\""+className+"\", daoArray);");
			sw.lnprint("\t\t\treturn "+varClassName+Array+";");
			sw.lnprint("\t\t}");
			sw.lnprint("\t}");
		}

		sw.lnprint("\t");

		sw.lnprint("}");
		FileUtil.writeToFile(sw.toString(), directory, "DAO_"+className+".java");
		return true;
	}

	public void start(ModelDef[] modelList, Configuration conf, boolean useCentralizeString,
			boolean includeDepracated) {
		for(ModelDef model : modelList){
			generateDAOClass(model, conf, useCentralizeString, includeDepracated);
		}
		
	}
}
