package com.ivanceras.db.server.util.generators;

import static com.ivanceras.db.server.util.DAOGenerator.Array;
import com.ivanceras.commons.conf.Configuration;
import com.ivanceras.commons.strings.CStringUtils;
import com.ivanceras.commons.writer.FileUtil;
import com.ivanceras.commons.writer.SourceWriter;
import com.ivanceras.commons.writer.StringSourceWriter;
import com.ivanceras.db.api.ModelDef;
import com.ivanceras.db.shared.datatype.JavaDataType;
import com.ivanceras.db.shared.util.SpecialCase;

public class MapperGenerator {
	
	
	public void start(ModelDef[] modelList, Configuration conf) {
		for(ModelDef model : modelList){
			generateMapperClass(model, conf);
		}
	}

	private boolean generateMapperClass(ModelDef modeldef, Configuration conf){
		String directory = conf.mapperdirectory;
		String packageName = conf.mapperpackageName; 
		SourceWriter sw = new StringSourceWriter();
		
		boolean useCamelCase = conf.useCamelCase;
		String className = CStringUtils.capitalize(modeldef.getModelName(), useCamelCase);
		sw.print("package "+packageName+";");
		sw.println("");
		sw.println("/***");
		sw.println("* This is automatically generated by com.ivanceras.util.DAOGenerator, based on the database table schema");
		sw.println("* ");
		sw.println("* ");
		sw.println("*/");
		sw.println("import "+conf.daopackageName+".DAO_"+className+";");
		sw.println("import "+conf.bopackageName+"."+className+";");
		sw.println("import "+conf.bopackageName+".*;");
		sw.println("");
		sw.println("public class "+className+"Mapper{");
		sw.println("/**");
		sw.println(" *"); 
		sw.println(" */");

		String[] attributes = modeldef.getAttributes();
		String[] hasOne = modeldef.getHasOne();

		String[] dataTypes = JavaDataType.fromGenericDataType(modeldef.getDataTypes());


		String[] distinctHasOne = BeanGenerator.getDistinctString(hasOne);

		String[] hasMany = modeldef.getHasMany();

		/**
		 * map from DAO to Business Object
		 */
		sw.println("\tpublic static "+className+" map(DAO_"+className+" dao"+className+"){");
		String boObject = CStringUtils.toVariableName(className, useCamelCase);
		sw.println("\t\tif(dao"+className+" == null){");
		sw.println("\t\t\treturn null;");
		sw.println("\t\t}");
		sw.println("\t\t"+className+" "+boObject+" = new "+className+"();"); 
		for(int i = 0; i < attributes.length; i++){
			String att = attributes[i];
			att = SpecialCase.getEquiv(att);
			att = CStringUtils.capitalize(att.toLowerCase(), useCamelCase);
			sw.println("\t\t"+boObject+".set"+att+"(dao"+className+".get"+att+"());");
		}
		for(int j = 0; j < distinctHasOne.length; j++){
			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[j].toLowerCase(), useCamelCase);
			sw.println("\t\t"+boObject+".set"+distinctHasOneStr+"("+distinctHasOneStr+"Mapper.map("+"dao"+className+".get"+distinctHasOneStr+"()));");
		}
		for(int k = 0; k < hasMany.length; k++){
			String hasManyStr = CStringUtils.capitalize(hasMany[k].toLowerCase(), useCamelCase);
			sw.println("\t\t"+boObject+".set"+hasManyStr+Array+"("+hasManyStr+"Mapper.map(dao"+className+".get"+hasManyStr+Array+"()));");
		}

		sw.println("\t\treturn "+boObject+";");
		sw.println("\t}");
		sw.println("");

		/**
		 * map from Business Object to DAO
		 */
		sw.println("\tpublic static DAO_"+className+" map("+className+" "+boObject+"){");
		sw.println("\t\tif("+boObject+" == null){");
		sw.println("\t\t\treturn null;");
		sw.println("\t\t}");

		sw.println("\t\tDAO_"+className+" dao"+className+" = new DAO_"+className+"();"); 
		for(int i = 0; i < attributes.length; i++){
			String att = SpecialCase.getEquiv(attributes[i]);
			att = CStringUtils.capitalize(att.toLowerCase(), useCamelCase);
			sw.println("\t\tdao"+className+".set"+att+"("+boObject+".get"+att+"());");
		}
		for(int j = 0; j < distinctHasOne.length; j++){
			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[j].toLowerCase(), useCamelCase);
			sw.println("\t\tdao"+className+".set"+distinctHasOneStr+"("+distinctHasOneStr+"Mapper.map("+boObject+".get"+distinctHasOneStr+"()));");
		}
		for(int k = 0; k < hasMany.length; k++){
			String hasManyStr = CStringUtils.capitalize(hasMany[k].toLowerCase(), useCamelCase);
			sw.println("\t\tdao"+className+".set"+hasManyStr+Array+"("+hasManyStr+"Mapper.map("+boObject+".get"+hasManyStr+Array+"()));");
		}

		sw.println("\t\treturn dao"+className+";");
		sw.println("\t}");



		/**
		 * array mapping from DAO to Business Object
		 */
		sw.println("\tpublic static "+className+"[] map(DAO_"+className+"[] dao"+className+Array+"){");
		sw.println("\t\tif(dao"+className+Array+" == null){");
		sw.println("\t\t\treturn null;");
		sw.println("\t\t}");
		sw.println("\t\t"+className+"[] "+boObject+Array+" = new "+className+"[dao"+className+Array+".length];");
		sw.println("\t\tint index = 0;");
		sw.println("\t\tfor(DAO_"+className+" dao"+className+" : dao"+className+Array+"){");
		sw.println("\t\t\t"+boObject+Array+"[index++] = map(dao"+className+");");
		sw.println("\t\t}");
		sw.println("\t\treturn "+boObject+Array+";");
		sw.println("\t}");

		/**
		 * array mapping from Business Object to DAO
		 */
		sw.println("\tpublic static DAO_"+className+"[] map("+className+"[] "+boObject+Array+"){");
		sw.println("\t\tif("+boObject+Array+" == null){");
		sw.println("\t\t\treturn null;");
		sw.println("\t\t}");
		sw.println("\t\tDAO_"+className+"[] dao"+className+Array+" = new DAO_"+className+"["+boObject+Array+".length];");
		sw.println("\t\tint index = 0;");
		sw.println("\t\tfor("+className+" "+className+" : "+boObject+Array+"){");
		sw.println("\t\t\tdao"+className+Array+"[index++] = map("+className+");");
		sw.println("\t\t}");
		sw.println("\t\treturn dao"+className+Array+";");
		sw.println("\t}");


//		/**
//		 * Generate the properties into a final static String as field constants
//		 */
//		sw.println("");
//		for(int i = 0; i < attributes.length; i++){
//			String attVar = CStringUtils.toVariableName(attributes[i], useCamelCase); 
//			sw.println("\tfinal static String "+attVar+" = \""+attVar+"\";");
//		}
//		for(int j = 0; j < distinctHasOne.length; j++){
//			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[j].toLowerCase(), useCamelCase);
//			String distinctHasOneVar = CStringUtils.toVariableName(distinctHasOneStr);
//			sw.println("\tfinal static String "+distinctHasOneVar+" = \""+distinctHasOneVar+"\";");
//		}
//		for(int k = 0; k < hasMany.length; k++){
//			String hasManyStr = CStringUtils.capitalize(hasMany[k].toLowerCase(), useCamelCase);
//			String hasManyVar = CStringUtils.toVariableName(hasManyStr);
//			sw.println("\tfinal static String "+hasManyVar+Array+" = \""+hasManyVar+Array+"\";");
//		}
//		
//		/**
//		 * Setter simulate reflection in gwt
//		 * 
//		 */
//		sw.println("");
//		sw.println("\tpublic static void setValue("+className+" _instance, String _property, Object _value){");
//		sw.println("\t\tswitch(_property){");
//		for(int i = 0; i < attributes.length; i++){
//			String att = CStringUtils.capitalize(attributes[i], useCamelCase);
//			String dt = dataTypes[i];
//			String attVar = CStringUtils.toVariableName(attributes[i], useCamelCase); 
//			sw.println("\t\tcase "+attVar+":");
//			sw.println("\t\t\t_instance.set"+att+"(("+dt+") _value);");
//			sw.println("\t\t\tbreak;");
//		}
//		for(int j = 0; j < distinctHasOne.length; j++){
//			String distinctHasOneClassName = CStringUtils.capitalize(distinctHasOne[j], useCamelCase);
//			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[j].toLowerCase(), useCamelCase);
//			String distinctHasOneVar = CStringUtils.toVariableName(distinctHasOneStr);
//			sw.println("\t\tcase "+distinctHasOneVar+":");
//			sw.println("\t\t\t_instance.set"+distinctHasOneStr+"(("+distinctHasOneClassName+") _value);");
//			sw.println("\t\t\tbreak;");
//		}
//		for(int k = 0; k < hasMany.length; k++){
//			String hasManyClassName = CStringUtils.capitalize(hasMany[k], useCamelCase);
//			String hasManyStr = CStringUtils.capitalize(hasMany[k].toLowerCase(), useCamelCase);
//			String hasManyVar = CStringUtils.toVariableName(hasManyStr);
//			sw.println("\t\tcase "+hasManyVar+Array+":");
//			sw.println("\t\t\t_instance.set"+hasManyStr+Array+"(("+hasManyClassName+"[]) _value);");
//			sw.println("\t\t\tbreak;");
//		}
//		
//		sw.println("\t\t}");
//		sw.println("\t}");
//
//
//		/**
//		 * Getter simulate reflection in gwt
//		 * 
//		 */
//		sw.println("");
//		sw.println("\tpublic static Object getValue("+className+" _instance, String _property){");
//		sw.println("\t\tswitch(_property){");
//		for(int i = 0; i < attributes.length; i++){
//			String att = CStringUtils.capitalize(attributes[i], useCamelCase);
//			String attVar = CStringUtils.toVariableName(attributes[i], useCamelCase); 
//			sw.println("\t\tcase "+attVar+":");
//			sw.println("\t\t\treturn _instance.get"+att+"();");
//		}
//		
//		for(int j = 0; j < distinctHasOne.length; j++){
//			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[j].toLowerCase(), useCamelCase);
//			String distinctHasOneVar = CStringUtils.toVariableName(distinctHasOneStr);
//			sw.println("\t\tcase "+distinctHasOneVar+":");
//			sw.println("\t\t\treturn _instance.get"+distinctHasOneStr+"();");
//		}
//		for(int k = 0; k < hasMany.length; k++){
//			String hasManyStr = CStringUtils.capitalize(hasMany[k].toLowerCase(), useCamelCase);
//			String hasManyVar = CStringUtils.toVariableName(hasManyStr);
//			sw.println("\t\tcase "+hasManyVar+Array+":");
//			sw.println("\t\t\treturn _instance.get"+hasManyStr+Array+"();");
//		}
//		
//		sw.println("\t\t}");
//		sw.println("\t\treturn null;");
//		sw.println("\t}");
//
//		/**
//		 * get properties
//		 * 
//		 */
//		sw.println("");
//		sw.println("\tpublic static String[] getModelFields(){");
//		sw.println("\t\treturn new String[]{");
//		boolean doComma = false;
//		for(int i = 0; i < attributes.length; i++){
//			if(doComma){sw.println(",");}else{doComma=true;}
//			String attVar = CStringUtils.toVariableName(attributes[i], useCamelCase); 
//			sw.print("\t\t\t"+attVar+"");
//		}
//		for(int j = 0; j < distinctHasOne.length; j++){
//			if(doComma){sw.println(",");}else{doComma=true;}
//			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[j].toLowerCase(), useCamelCase);
//			String distinctHasOneVar = CStringUtils.toVariableName(distinctHasOneStr);
//			sw.print("\t\t\t"+distinctHasOneVar);
//		}
//		for(int k = 0; k < hasMany.length; k++){
//			if(doComma){sw.println(",");}else{doComma=true;}
//			String hasManyStr = CStringUtils.capitalize(hasMany[k].toLowerCase(), useCamelCase);
//			String hasManyVar = CStringUtils.toVariableName(hasManyStr);
//			sw.print("\t\t\t"+hasManyVar+Array+"");
//		}
//		sw.println();
//		sw.println("\t\t};");
//		sw.println("\t}");
//
//		/**
//		 * get datatypes
//		 * 
//		 */
//		sw.println("");
//		sw.println("\tpublic static Class[] getFieldDataTypes(){");
//		sw.println("\t\treturn new Class[]{");
//		boolean doCommaDataTypes = false;
//		for(int i = 0; i < dataTypes.length; i++){
//			if(doCommaDataTypes){sw.println(",");}else{doCommaDataTypes=true;}
//			sw.print("\t\t\t"+dataTypes[i]+".class");
//		}
//		for(int j = 0; j < distinctHasOne.length; j++){
//			if(doCommaDataTypes){sw.println(",");}else{doCommaDataTypes=true;}
//			String distinctHasOneClassName = CStringUtils.capitalize(distinctHasOne[j], useCamelCase);
//			sw.print("\t\t\t"+distinctHasOneClassName+".class");
//		}
//		for(int k = 0; k < hasMany.length; k++){
//			if(doCommaDataTypes){sw.println(",");}else{doCommaDataTypes=true;}
//			String hasManyClassName = CStringUtils.capitalize(hasMany[k], useCamelCase);
//			sw.print("\t\t\t"+hasManyClassName+".class");
//		}
//		sw.println();
//		sw.println("\t\t};");
//		sw.println("\t}");

		sw.println("}");
		
		FileUtil.writeToFile(sw.toString(), directory, ""+className+"Mapper.java");

		return true;

	}
}
