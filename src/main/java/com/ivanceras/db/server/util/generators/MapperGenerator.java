package com.ivanceras.db.server.util.generators;

import static com.ivanceras.db.server.util.DAOGenerator.Array;

import java.util.ArrayList;
import java.util.List;

import com.ivanceras.commons.conf.Configuration;
import com.ivanceras.commons.strings.CStringUtils;
import com.ivanceras.commons.writer.FileUtil;
import com.ivanceras.commons.writer.SourceWriter;
import com.ivanceras.commons.writer.StringSourceWriter;
import com.ivanceras.db.api.ModelDef;
import com.ivanceras.db.shared.util.SpecialCase;

public class MapperGenerator {
	
	
	public void start(ModelDef[] modelList, Configuration conf) {
		for(ModelDef model : modelList){
			generateMapperClass(model, conf);
		}
	}

	private boolean generateMapperClass(ModelDef modeldef, Configuration conf){
		String directory = conf.mapperdirectory;
		String packageName = conf.mapperpackageName; 
		SourceWriter sw = new StringSourceWriter();
		
		boolean useCamelCase = conf.useCamelCase;
		String className = CStringUtils.capitalize(modeldef.getModelName(), useCamelCase);
		sw.print("package "+packageName+";");
		sw.lnprint("");
		sw.lnprint("/***");
		sw.lnprint("* This is automatically generated by "+MapperGenerator.class.getCanonicalName()+", based on the database table schema");
		sw.lnprint("* ");
		sw.lnprint("* ");
		sw.lnprint("*/");
		sw.lnprint("import "+conf.daopackageName+".DAO_"+className+";");
		sw.lnprint("import "+conf.bopackageName+"."+className+";");
		sw.lnprint("import "+conf.bopackageName+".*;");
		sw.lnprint("import static "+conf.metaDataPackageName+".Column.*;");
		sw.lnprint("import "+conf.metaDataPackageName+".Table;");
		sw.lnprint("import "+CStringUtils.class.getCanonicalName()+";");
		sw.lnprint("");
		sw.lnprint("public class "+className+"Mapper{");
		sw.lnprint("/**");
		sw.lnprint(" *"); 
		sw.lnprint(" */");

		String[] attributes = modeldef.getAttributes();
		String[] hasOne = modeldef.getHasOne();


		String[] distinctHasOne = BeanGenerator.getDistinctString(hasOne);

		String[] hasMany = modeldef.getHasMany();

		List<String> fieldList = new ArrayList<String>();
		List<String> objectList = new ArrayList<String>();
		List<String> tableList = new ArrayList<String>();
		
		for(String att : attributes){
			att = CStringUtils.toVariableName(att.toLowerCase(), useCamelCase);
			fieldList.add(att);
		}
		
		for(String ho : hasOne){
			String obj = CStringUtils.toVariableName(ho.toLowerCase(), useCamelCase);
			tableList.add(ho);
			objectList.add(obj);
		}
		for(String hm : hasMany){
			String obj = CStringUtils.toVariableName(hm.toLowerCase(), useCamelCase);
			tableList.add(hm);
			objectList.add(obj);
		}
		
		sw.lnTabPrint("/**");
		sw.lnTabPrint("*fields -  are those Model properties exposed in the API, change the field names as needed to support previous revision of your API");
		sw.lnTabPrint("*columns - These are the exact column names in the database tables, fields to columns are translated back and fort using their relative indexes on the array");
		sw.lnTabPrint("* Make sure the columns and field relative location is aligned ");
		sw.lnTabPrint("*/");
		sw.lnTabPrint("private static String[] fields  = {"+getQuotedStringListRepresentation(fieldList.toArray(new String[fieldList.size()]))+"};");
		sw.lnTabPrint("private static String[] columns = {"+getStringListRepresentation("",attributes)+"};");
		sw.lnprint();
		sw.lnTabPrint("private static String[] objects  = {"+getQuotedStringListRepresentation(objectList.toArray(new String[objectList.size()]))+"};");
		sw.lnTabPrint("private static String[] tables   = {"+getStringListRepresentation("Table.", tableList.toArray(new String[tableList.size()]))+"};");
		sw.lnprint();
		sw.lnprint();

		/**
		 * map from DAO to Business Object
		 */
		sw.lnTabPrint("public static "+className+" map(DAO_"+className+" dao"+className+"){");
		String boObject = CStringUtils.toVariableName(className, useCamelCase);
		sw.lnTabPrint("    if(dao"+className+" == null){");
		sw.lnTabPrint("        return null;");
		sw.lnTabPrint("    }");
		sw.lnTabPrint("    "+className+" "+boObject+" = new "+className+"();"); 
		for(int i = 0; i < attributes.length; i++){
			String att = attributes[i];
			att = SpecialCase.getEquiv(att);
			att = CStringUtils.capitalize(att.toLowerCase(), useCamelCase);
			sw.lnTabPrint("    "+boObject+".set"+att+"(dao"+className+".get"+att+"());");
		}
		for(int j = 0; j < distinctHasOne.length; j++){
			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[j].toLowerCase(), useCamelCase);
			sw.lnTabPrint("    "+boObject+".set"+distinctHasOneStr+"("+distinctHasOneStr+"Mapper.map("+"dao"+className+".get"+distinctHasOneStr+"()));");
		}
		for(int k = 0; k < hasMany.length; k++){
			String hasManyStr = CStringUtils.capitalize(hasMany[k].toLowerCase(), useCamelCase);
			sw.lnTabPrint("    "+boObject+".set"+hasManyStr+Array+"("+hasManyStr+"Mapper.map(dao"+className+".get"+hasManyStr+Array+"()));");
		}

		sw.lnTabPrint("    return "+boObject+";");
		sw.lnTabPrint("}");
		sw.lnprint("");

		/**
		 * map from Business Object to DAO
		 */
		sw.lnTabPrint("public static DAO_"+className+" map("+className+" "+boObject+"){");
		sw.lnTabPrint("    if("+boObject+" == null){");
		sw.lnTabPrint("        return null;");
		sw.lnTabPrint("    }");

		sw.lnTabPrint("    DAO_"+className+" dao"+className+" = new DAO_"+className+"();"); 
		for(int i = 0; i < attributes.length; i++){
			String att = SpecialCase.getEquiv(attributes[i]);
			att = CStringUtils.capitalize(att.toLowerCase(), useCamelCase);
			sw.lnTabPrint("    dao"+className+".set"+att+"("+boObject+".get"+att+"());");
		}
		for(int j = 0; j < distinctHasOne.length; j++){
			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[j].toLowerCase(), useCamelCase);
			sw.lnTabPrint("    dao"+className+".set"+distinctHasOneStr+"("+distinctHasOneStr+"Mapper.map("+boObject+".get"+distinctHasOneStr+"()));");
		}
		for(int k = 0; k < hasMany.length; k++){
			String hasManyStr = CStringUtils.capitalize(hasMany[k].toLowerCase(), useCamelCase);
			sw.lnTabPrint("    dao"+className+".set"+hasManyStr+Array+"("+hasManyStr+"Mapper.map("+boObject+".get"+hasManyStr+Array+"()));");
		}

		sw.lnTabPrint("    return dao"+className+";");
		sw.lnTabPrint("}");



		/**
		 * array mapping from DAO to Business Object
		 */
		sw.lnTabPrint("public static "+className+"[] map(DAO_"+className+"[] dao"+className+Array+"){");
		sw.lnTabPrint("    if(dao"+className+Array+" == null){");
		sw.lnTabPrint("        return null;");
		sw.lnTabPrint("    }");
		sw.lnTabPrint("    "+className+"[] "+boObject+Array+" = new "+className+"[dao"+className+Array+".length];");
		sw.lnTabPrint("    int index = 0;");
		sw.lnTabPrint("    for(DAO_"+className+" dao"+className+" : dao"+className+Array+"){");
		sw.lnTabPrint("        "+boObject+Array+"[index++] = map(dao"+className+");");
		sw.lnTabPrint("    }");
		sw.lnTabPrint("    return "+boObject+Array+";");
		sw.lnTabPrint("}");

		/**
		 * array mapping from Business Object to DAO
		 */
		sw.lnTabPrint("public static DAO_"+className+"[] map("+className+"[] "+boObject+Array+"){");
		sw.lnTabPrint("    if("+boObject+Array+" == null){");
		sw.lnTabPrint("        return null;");
		sw.lnTabPrint("    }");
		sw.lnTabPrint("    DAO_"+className+"[] dao"+className+Array+" = new DAO_"+className+"["+boObject+Array+".length];");
		sw.lnTabPrint("    int index = 0;");
		sw.lnTabPrint("    for("+className+" "+className+" : "+boObject+Array+"){");
		sw.lnTabPrint("        dao"+className+Array+"[index++] = map("+className+");");
		sw.lnTabPrint("    }");
		sw.lnTabPrint("    return dao"+className+Array+";");
		sw.lnTabPrint("}");
	
		sw.lnprint();
		sw.lnprint();
		sw.lnTabPrint("public static String getColumn(String field){");
		sw.lnTabPrint("	int index = CStringUtils.indexOf(fields, field);");
		sw.lnTabPrint("	if(index >= 0){");
		sw.lnTabPrint("		return columns[index];");
		sw.lnTabPrint("	}");
		sw.lnTabPrint("	return null;");
		sw.lnTabPrint("}");
		sw.lnprint();
		sw.lnprint();
		sw.lnTabPrint("public static String getField(String column){");
		sw.lnTabPrint("	int index = CStringUtils.indexOf(columns, column);");
		sw.lnTabPrint("	if(index >= 0){");
		sw.lnTabPrint("		return  fields[index];");
		sw.lnTabPrint("	}");
		sw.lnTabPrint("	return null;");
		sw.lnTabPrint("}");
		
		sw.lnprint();
		sw.lnprint();
		sw.lnTabPrint("public static String getTable(String object){");
		sw.lnTabPrint("	int index = CStringUtils.indexOf(objects, object);");
		sw.lnTabPrint("	if(index >= 0){");
		sw.lnTabPrint("		return tables[index];");
		sw.lnTabPrint("	}");
		sw.lnTabPrint("	return null;");
		sw.lnTabPrint("}");
		sw.lnprint();
		sw.lnprint();
		sw.lnTabPrint("public static String getObject(String table){");
		sw.lnTabPrint("	int index = CStringUtils.indexOf(tables, table);");
		sw.lnTabPrint("	if(index >= 0){");
		sw.lnTabPrint("		return  objects[index];");
		sw.lnTabPrint("	}");
		sw.lnTabPrint("	return null;");
		sw.lnTabPrint("}");

		sw.lnprint("}");
		
		FileUtil.writeToFile(sw.toString(), directory, ""+className+"Mapper.java");

		return true;

	}
	
	private String getQuotedStringListRepresentation(String[] list){
		if(list == null){
			return null;
		}
		StringBuffer buff = new StringBuffer();
		boolean doComma = false;
		for(String l : list){
			if(doComma){buff.append(", ");}else{doComma=true;}
			buff.append("\""+l+"\"");
		}
		return buff.toString();
	}
	
	private String getStringListRepresentation(String prepend, String[] list){
		if(list == null){
			return null;
		}
		StringBuffer buff = new StringBuffer();
		boolean doComma = false;
		for(String l : list){
			if(doComma){buff.append(", ");}else{doComma=true;}
			buff.append(" "+prepend+l+" ");
		}
		return buff.toString();
	}
	
	
	
}
