package com.ivanceras.db.server.util.generators;

import static com.ivanceras.db.server.util.DAOGenerator.Array;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.ivanceras.commons.conf.Configuration;
import com.ivanceras.commons.strings.CStringUtils;
import com.ivanceras.commons.writer.FileUtil;
import com.ivanceras.commons.writer.SourceWriter;
import com.ivanceras.commons.writer.StringSourceWriter;
import com.ivanceras.db.api.IDatabase;
import com.ivanceras.db.api.ModelDef;
import com.ivanceras.db.shared.datatype.DataTypeGeneric;
import com.ivanceras.db.shared.datatype.DataTypeJava;
import com.ivanceras.db.shared.util.SpecialCase;

/**
 * TODO: Needs to use the local column as the property name of the refered object instead of lowercase of the refered object
 * @author lee
 *
 */
public class BeanGenerator {


	public boolean start(ModelDef[] modeldef, Configuration conf){
		for(ModelDef model : modeldef){
			generate(model, conf);
		}
		generateAllBeansClasses(modeldef, conf);
		return true;
	}

	public boolean generateAllBeansClasses(ModelDef[] modeldef, Configuration conf){
		String directory = conf.bodirectory;
		String packageName = conf.bopackageName; 
		
		SourceWriter sw = new StringSourceWriter();
		
		boolean useCamelCase = conf.useCamelCase;
		String className = CStringUtils.capitalize("AllBeans", useCamelCase);
		sw.print("package "+packageName+";");
		sw.lnprint("");
		sw.lnprint("/***");
		sw.lnprint("* This is automatically generated by "+getClass().getCanonicalName()+", based on the database table schema");
		sw.lnprint("* ");
		sw.lnprint("* ");
		sw.lnprint("*/");
		sw.lnprint("public class "+className+"{");
		sw.lnprint("");
		sw.lnprint("");
		sw.lnTabPrint("public static Class<?>[] allClasses(){");
		sw.lnTabPrint("    return new Class[]{");
		boolean doComma = false;
		for(ModelDef model : modeldef){
			String beanName = CStringUtils.capitalize(model.getModelName(), useCamelCase);
			if(doComma){sw.print(",");}else{doComma=true;}
			sw.lnTabPrint("        "+beanName+".class");
		}
		sw.lnTabPrint("    };");
		sw.lnTabPrint("}");
		sw.lnprint("");
		sw.lnprint("}");
		FileUtil.writeToFile(sw.toString(), directory, ""+className+".java");
		return true;
	}
	
	public boolean generate(ModelDef modeldef, Configuration conf){
		String directory = conf.bodirectory;
		String packageName = conf.bopackageName; 
		
		SourceWriter sw = new StringSourceWriter();
		
		boolean useCamelCase = conf.useCamelCase;
		String className = CStringUtils.capitalize(modeldef.getModelName(), useCamelCase);
		sw.print("package "+packageName+";");
		sw.lnprint("");
		sw.lnprint("/***");
		sw.lnprint("* This is automatically generated by "+getClass().getCanonicalName()+", based on the database table schema");
		sw.lnprint("* ");
		sw.lnprint("* ");
		sw.lnprint("*/");
		sw.lnprint("import java.io.Serializable;");
		sw.lnprint("");
		sw.lnprint("public class "+className+" implements Serializable{");
		sw.lnprint("/**");
		sw.lnprint(" *"); 
		sw.lnprint(" */");
		sw.lnTabPrint("private static final long serialVersionUID = "+UUID.randomUUID().getLeastSignificantBits()+"L;");
		sw.lnprint("");

		String[] attributes = modeldef.getAttributes();
		String[] dataTypes = DataTypeJava.fromGenericDataType(modeldef.getDataTypes());
		if(modeldef.getSubClass() != null && modeldef.getSubClass().length > 0){
			String[] subclassAttributes = {IDatabase.SUBCLASSTABLE};
			attributes = CStringUtils.mergeString(attributes, subclassAttributes);
			String[] subclassDatatypes = {DataTypeGeneric.STRING};
			dataTypes = CStringUtils.mergeString(dataTypes, subclassDatatypes);
		}
		String[] hasOne = modeldef.getHasOne();
		String[] distinctHasOne = getDistinctString(hasOne);
		String[] hasMany = modeldef.getHasMany();

		for(int i = 0; i < attributes.length; i++){
			String att = SpecialCase.getEquiv(attributes[i]);
			att = CStringUtils.toVariableName(att.toLowerCase(), useCamelCase);
			String datatype = dataTypes[i];
			sw.lnTabPrint("private "+datatype+" "+att+";");
		}
		for(int i = 0; i < distinctHasOne.length; i++){
			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[i].toLowerCase(), useCamelCase);
			String distinctHasOneVar = CStringUtils.toVariableName(distinctHasOneStr, useCamelCase);
			sw.lnprint("");
			sw.lnTabPrint("private "+distinctHasOneStr+" "+distinctHasOneVar+";");
		}
		for(int i = 0; i < hasMany.length; i++){
			String hasManyStr = CStringUtils.capitalize(hasMany[i].toLowerCase(), useCamelCase);
			String hasManyVar = CStringUtils.toVariableName(hasManyStr, useCamelCase);
			sw.lnprint("");
			sw.lnTabPrint("private "+hasManyStr+"[] "+hasManyVar+Array+";");
		}


		sw.lnprint("");
		sw.lnprint("");
		sw.lnTabPrint("public "+className+"(){");
		sw.lnTabPrint("    ");
		sw.lnTabPrint("}");
		sw.lnprint("");
		for(int i = 0; i < attributes.length; i++){
			String att = SpecialCase.getEquiv(attributes[i]);
			att = CStringUtils.capitalize(att.toLowerCase(), useCamelCase);
			String attVar = CStringUtils.toVariableName(att, useCamelCase); 
			String datatype = dataTypes[i];
			sw.lnTabPrint("public "+datatype+" get"+att+"(){");
			sw.lnTabPrint("    return "+attVar+";");
			sw.lnTabPrint("}");
			sw.lnprint("");
			sw.lnTabPrint("public void set"+att+"("+datatype+" "+attVar+"){");
			sw.lnTabPrint("    this."+attVar+" = "+attVar+";");
			sw.lnTabPrint("}");
			sw.lnprint("");
		}

		for(int i = 0; i < distinctHasOne.length; i++){
			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[i].toLowerCase(), useCamelCase);
			String distinctHasOneVar = CStringUtils.toVariableName(distinctHasOneStr, useCamelCase);
			sw.lnprint("");
			sw.lnTabPrint("public void set"+distinctHasOneStr+"("+distinctHasOneStr+" "+distinctHasOneVar+"){");
			sw.lnTabPrint("    this."+distinctHasOneVar+" = "+distinctHasOneVar+";");
			sw.lnTabPrint("}");
			sw.lnprint("");
			sw.lnTabPrint("public "+distinctHasOneStr+" get"+distinctHasOneStr+"(){");
			sw.lnTabPrint("    return "+distinctHasOneVar+";");
			sw.lnTabPrint("}");
		}


		for(int i = 0; i < hasMany.length; i++){
			String hasManyStr = CStringUtils.capitalize(hasMany[i].toLowerCase(), useCamelCase);
			String hasManyVar = CStringUtils.toVariableName(hasManyStr, useCamelCase);
			sw.lnprint("");
			sw.lnTabPrint("public void set"+hasManyStr+Array+"("+hasManyStr+"[] "+hasManyVar+Array+"){");
			sw.lnTabPrint("    this."+hasManyVar+Array+" = "+hasManyVar+Array+";");
			sw.lnTabPrint("}");
			sw.lnprint("");
			sw.lnTabPrint("public "+hasManyStr+"[] get"+hasManyStr+Array+"(){");
			sw.lnTabPrint("    return "+hasManyVar+Array+";");
			sw.lnTabPrint("}");
		}
		//Override the toString
		sw.lnTabPrint("@Override");
		sw.lnTabPrint("public String toString(){");
		sw.lnTabPrint("    StringBuilder sb = new StringBuilder();");
		sw.lnTabPrint("    sb.append("+className+".class+\"->{\");");
		for(int i = 0; i < attributes.length; i++){
			String att = SpecialCase.getEquiv(attributes[i]);
			att = CStringUtils.capitalize(att.toLowerCase(), useCamelCase);
			String attVar = CStringUtils.toVariableName(att, useCamelCase); 
			sw.lnTabPrint("    sb.append("+attVar+"!=null ? "+attVar+"+\", \":\"\");");
		}
		for(int i = 0; i < distinctHasOne.length; i++){
			String distinctHasOneStr = CStringUtils.capitalize(distinctHasOne[i].toLowerCase(), useCamelCase);
			String distinctHasOneVar = CStringUtils.toVariableName(distinctHasOneStr, useCamelCase);
			sw.lnTabPrint("    sb.append("+distinctHasOneVar+"!=null ? "+distinctHasOneVar+"+\", \":\"\");");
		}
		for(int i = 0; i < hasMany.length; i++){
			String hasManyStr = CStringUtils.capitalize(hasMany[i].toLowerCase(), useCamelCase);
			String hasManyVar = CStringUtils.toVariableName(hasManyStr, useCamelCase);
			sw.lnTabPrint("    sb.append("+hasManyVar+Array+"!=null ? "+hasManyVar+Array+"+\", \":\"\");");
		}

		sw.lnTabPrint("    sb.append(\"}\");");
		sw.lnTabPrint("    return sb.toString();");
		sw.lnTabPrint("}");
		sw.lnprint("}");
		FileUtil.writeToFile(sw.toString(), directory, ""+className+".java");
		return true;
	}

	public static String[] getDistinctString(String[] hasOne) {
		List<String> distinctString = new ArrayList<String>();
		for(String h : hasOne){
			if(distinctString.contains(h)){
				;
			}else{
				distinctString.add(h);
			}
		}
		return distinctString.toArray(new String[distinctString.size()]);
	}
}
